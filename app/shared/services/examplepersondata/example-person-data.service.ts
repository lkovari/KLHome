import { Injectable } from '@angular/core';
import { Person } from 'app/shared/models/person.model';
import { FileLoaderService } from '../fileloader/file-loader.service';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class ExamplePersonDataService {
  useRouteResolver = true;
  // examplepersondata.csv generated by https://www.convertcsv.com/generate-test-data.htm
  // 100000 rows
  // id,firstname,lastname,age,street,city,state,zip,date
  constructor(private fileLoaderService: FileLoaderService) { }

  private parseFileContent(fileContent): Array<Person> {
    const t0 = performance.now();
    const personData = new Array<Person>();
    const rowsOfContent = fileContent.split('\n');
    rowsOfContent.forEach((row: string) => {
      const cols = row.split(',');
      // has valid numeric value of id and age?
      if (!Number.isNaN(+cols[0]) && !Number.isNaN(+cols[3])) {
        const person = new Person(+cols[0], cols[1], cols[2], +cols[3], cols[4],
          cols[5], cols[6], cols[7], new Date(cols[8]));
        personData.push(person);
      }
    });
    const elapsed = performance.now() - t0;
    console.log(`RESOLVE: ExamplePersonDataService.parseFileContent : #${personData.length} Person rows parsed. Elapsed ${elapsed}`);
    return personData;
  }

  private loadFileContent(): Observable<Array<Person>> {
    const t0 = performance.now();
    const contentObservable = this.fileLoaderService.loadtTextFile('exampledata', 'examplepersondata.csv', true);
    return contentObservable.pipe(
      map(fileContent => {
        // return this.parseFileContent(fileContent);
        const personData = this.parseFileContent(fileContent);
        console.log(`RESOLVE: ExamplePersonDataService.loadFileContent Elapsed ${(performance.now() - t0)}`);
        return personData;
      }
    ));
  }

  loadtExamplePersonData(): Observable<Array<Person>> {
     return this.loadFileContent();
  }
}
