import { Injectable } from '@angular/core';
import { Person } from 'app/shared/models/person.model';
import { FileLoaderService } from '../fileloader/file-loader.service';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class ExamplePersonDataService {
  // examplepersondata.csv generated by https://www.convertcsv.com/generate-test-data.htm
  constructor(private fileLoaderService: FileLoaderService) { }

  private parseFileContent(fileContent): Array<Person> {
    const personData = new Array<Person>();
    const rowsOfContent = fileContent.split('\n');
    rowsOfContent.forEach((row: string) => {
      const cols = row.split(',');
      // has valid numeric value of id and age?
      if (!Number.isNaN(+cols[0]) && !Number.isNaN(+cols[3])) {
        const person = new Person(+cols[0], cols[1], cols[2], +cols[3], cols[4],
          cols[5], cols[6], cols[7], new Date(cols[8]));
        personData.push(person);
      }
    });
    console.log(`ExamplePersonDataService.parseFileContent : Person row parsed # ${personData.length}`);
    return personData;
  }

  loadFileContent(): Observable<Array<Person>> {
    // const personData = new Array<Person>();
    const contentObservable = this.fileLoaderService.loadtTextFile('exampledata', 'examplepersondata.csv', true);

    return contentObservable.pipe(
      map(fileContent => {
        return this.parseFileContent(fileContent);
      }
    ));
    /*
    contentObservable.mapTo(fileContent => {
        const rowsOfContent = fileContent.split('\n');
        rowsOfContent.forEach((row: string) => {
          const cols = row.split(',');
          // has valid numeric value of id and age?
          if (!Number.isNaN(+cols[0]) && !Number.isNaN(+cols[3])) {
            const person = new Person(+cols[0], cols[1], cols[2], +cols[3], cols[4],
              cols[5], cols[6], cols[7], new Date(cols[8]));
            personData.push(person);
          }
        });
        console.log(JSON.stringify(personData));
    });
    return new Observable(observer => {
      setTimeout(() => {
          observer.next(personData);
      }, 1);
    });
    */
  }


  loadtExamplePersonData(): Observable<Array<Person>> {
    return this.loadFileContent();
  }
}
